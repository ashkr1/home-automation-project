name: Auto Build & Release ESP01 Firmware

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üßÆ Calculate next version based on lines changed
        id: version
        run: |
          latest=$(git tag --sort=-v:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | head -n1 || echo "v0.0.0")
          echo "Latest tag: $latest"
          parts=(${latest//./ })
          major=${parts[0]#v}
          minor=${parts[1]:-0}
          patch=${parts[2]:-0}

          if git rev-parse "$latest" >/dev/null 2>&1; then
            diffstat=$(git diff "$latest"..HEAD --shortstat | awk '{print $1 + $3}')
          else
            diffstat=$(git diff HEAD --shortstat | awk '{print $1 + $3}')
          fi

          if [ "$diffstat" -gt 300 ]; then
            major=$((major+1))
            minor=0
            patch=0
          elif [ "$diffstat" -gt 100 ]; then
            minor=$((minor+1))
            patch=0
          else
            patch=$((patch+1))
          fi

          next="v$major.$minor.$patch"
          echo "‚úÖ Next version: $next"
          echo "version=$next" >> $GITHUB_OUTPUT

      - name: üìù Patch version into source
        run: |
          version=${{ steps.version.outputs.version }}
          sed -i "s/v{{VERSION}}/$version/g" platformio.ini || true
          sed -i "s/v{{VERSION}}/$version/g" include/Configs.hpp || true

      - name: üîê Patch Firebase API key into configs
        run: |
          sed -i "s|{{FIREBASE_API_KEY}}|${{ secrets.FIREBASE_API_KEY }}|g" include/Configs.hpp

      - name: üîê Inject MQTT certificate into MQTTServer.cpp
        run: |
          echo "${{ secrets.MQTT_CONNECTION_CERT }}" > cert.pem
          awk '
            /{{MQTT_CONNECTION_CERT}}/ {
              while ((getline line < "cert.pem") > 0) print line;
              next
            }
            { print }
          ' src/MQTTServer.cpp > src/MQTTServer.cpp.new

          mv src/MQTTServer.cpp.new src/MQTTServer.cpp
          shred -u cert.pem || rm -f cert.pem

      - name: üîç Context check for embedded certificate
        run: |
          echo "üîé Checking 5-line context around BEGIN CERTIFICATE:"
          awk '
            NR > 2 { prev2 = prev1; prev1 = line }
            { line = $0; lines[NR] = $0 }
            /BEGIN CERTIFICATE/ {
              print prev2
              print prev1
              print $0
              getline; print
              getline; print
            }
          ' src/MQTTServer.cpp

          echo ""
          echo "üîé Checking 5-line context around END CERTIFICATE:"
          awk '
            NR > 2 { prev2 = prev1; prev1 = line }
            { line = $0; lines[NR] = $0 }
            /END CERTIFICATE/ {
              print prev2
              print prev1
              print $0
              getline; print
              getline; print
            }
          ' src/MQTTServer.cpp

      - name: üîê Print certificate block SHA256 (masked)
        run: |
          cert_block=$(awk '/BEGIN CERTIFICATE/,/END CERTIFICATE/' src/MQTTServer.cpp)
          echo "$cert_block" | sha256sum | cut -d' ' -f1 > cert_hash.txt
          echo "‚úÖ Certificate SHA256: $(cat cert_hash.txt)"


      - name: üêç Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: üß™ Export MQTT secrets to ENV for PlatformIO
        run: |
          echo "MQTT_SERVER_ADDRESS=${{ secrets.MQTT_SERVER_ADDRESS }}" >> $GITHUB_ENV
          echo "MQTT_USERNAME=${{ secrets.MQTT_USERNAME }}" >> $GITHUB_ENV
          echo "MQTT_PASSWORD=${{ secrets.MQTT_PASSWORD }}" >> $GITHUB_ENV
          echo "MQTT_TOPIC=${{ secrets.MQTT_TOPIC }}" >> $GITHUB_ENV

      - name: üí† Install PlatformIO
        run: pip install platformio


      - name: ‚ö°Ô∏è Build esp01_1m using mqtt environments
        run: |
          platformio run -e esp01_1m_using_mqtt
          cp .pio/build/esp01_1m_using_mqtt/firmware.bin esp01_1m_using_mqtt-${{ steps.version.outputs.version }}.bin

      - name: ‚ö°Ô∏è Build esp01_1m using firebase environments
        run: |
          platformio run -e esp01_1m_using_firebase
          cp .pio/build/esp01_1m_using_firebase/firmware.bin esp01_1m_using_firebase-${{ steps.version.outputs.version }}.bin

      - name: ‚ö°Ô∏è Build esp d1 mini using mqtt environments
        run: |
          platformio run -e d1_mini_using_mqtt
          cp .pio/build/d1_mini_using_mqtt/firmware.bin d1_mini_using_mqtt-${{ steps.version.outputs.version }}.bin


      - name: ‚ö°Ô∏è Build esp d1 mini using firebase environments
        run: |
          platformio run -e d1_mini_using_firebase
          cp .pio/build/d1_mini_using_firebase/firmware.bin d1_mini_using_firebase-${{ steps.version.outputs.version }}.bin


      - name: üöÄ Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: Firmware ${{ steps.version.outputs.version }}
          files: |
            esp01_1m_using_firebase-${{ steps.version.outputs.version }}.bin
            esp01_1m_using_mqtt-${{ steps.version.outputs.version }}.bin
            d1_mini_using_firebase-${{ steps.version.outputs.version }}.bin
            d1_mini_using_mqtt-${{ steps.version.outputs.version }}.bin
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
